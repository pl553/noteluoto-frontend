/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Регистрация нового пользователя
         * @description Пользователь вводит имя пользователя и пароль, чтобы создать новую учетную запись.
         */
        post: operations["registerUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Аутентификация пользователя и получение JWT токена
         * @description Пользователь вводит имя пользователя и пароль, и получает JWT токен.
         */
        post: operations["loginUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получение заметок с фильтрацией по тегам, поиском по ключевым словам или семантическим поиском и пагинацией
         * @description Получение заметок с возможностью фильтрации по тегам, точного поиска по заголовку и описанию, а также пагинации (по 20 заметок на страницу).
         */
        get: operations["getNotesWithSearchAndPagination"];
        put?: never;
        /**
         * Создание новой заметки
         * @description Создает новую заметку с тегами, чеклистами
         */
        post: operations["createNote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/{note_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получение заметки по ID
         * @description Возвращает информацию о заметке, включая вложения, чеклисты и теги.
         */
        get: operations["getNote"];
        put?: never;
        post?: never;
        /**
         * Удаление заметки
         * @description Удаляет заметку по ее ID.
         */
        delete: operations["deleteNote"];
        options?: never;
        head?: never;
        /**
         * Обновление заметки
         * @description Обновляет информацию о заметке, включая чеклисты и вложения.
         */
        patch: operations["updateNote"];
        trace?: never;
    };
    "/checklist/{note_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Добавить чеклист к заметке */
        post: operations["addChecklistToNote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/checklist/{checklist_id}/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Добавить пункт в чеклист */
        post: operations["addChecklistItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/checklist/item/{item_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Изменить статус выполненности пункта чеклиста на противоположный */
        put: operations["updateChecklistItemStatus"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/checklist/item/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Удалить пункт из чеклиста */
        delete: operations["deleteChecklistItem"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/checklist/{checklist_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить чеклист по ID */
        get: operations["getChecklistById"];
        put?: never;
        post?: never;
        /** Удалить чеклист */
        delete: operations["deleteChecklist"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/attachment/{note_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Добавить вложение к заметке
         * @description Загружает файл и добавляет его в указанную заметку. Ответ содержит URL для доступа к файлу.
         */
        post: operations["addAttachmentToNote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/attachment/{attachment_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить вложение из заметки */
        get: operations["getAttachmentFromNote"];
        put?: never;
        post?: never;
        /** Удалить вложение из заметки */
        delete: operations["deleteAttachmentFromNote"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Создание нового тега
         * @description Создает новый тег для использования в заметках.
         */
        post: operations["createTag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получение всех тегов от самых часто используемых к менее используемым
         * @description Возвращает все доступные теги для фильтрации заметок.
         */
        get: operations["getAllTags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags/{note_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получение тегов заметки
         * @description Возвращает список всех тегов, связанных с указанной заметкой.
         */
        get: operations["getTagsForNote"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags/{note_id}/{tag_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Добавление тега к заметке
         * @description Привязывает тег к указанной заметке по её ID.
         */
        post: operations["addTagToNote"];
        /**
         * Удаления тега из заметки
         * @description Удаление тега из заметки по ID
         */
        delete: operations["deleteTagToNote"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/answer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Получение ответа от искусственного интеллекта
         * @description Отправка запроса для получения ответа от ИИ.
         */
        post: operations["getAIAnswer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получение истории запросов и ответов ИИ
         * @description Возвращает историю всех запросов, сделанных пользователем, и соответствующих ответов ИИ. Поддерживает пагинацию.
         */
        get: operations["getAIHistory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/suggest/queries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получение предложений по поисковым запросам
         * @description Отправка запроса для получения рекомендаций по возможным запросам.
         */
        get: operations["suggestQueries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/generate_tags/{note_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Генерация тегов на основе данных замтеки
         * @description Автоматическая генерация тегов на основе текста заметки.
         */
        post: operations["generateTags"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/suggest/tags/{note_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Рекомендации по тегам
         * @description Получение рекомендаций по тегам на основе данных пользователя.
         */
        post: operations["suggestTags"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        NoteCreateRequest: {
            /** @example Заголовок заметки */
            title?: string;
            /** @example Описание заметки в формате Markdown */
            body?: string;
        };
        NotePatchRequest: {
            /** @example Заголовок заметки */
            title?: string;
            /** @example Описание заметки в формате Markdown */
            body?: string;
            /**
             * Format: date-time
             * @example 2025-01-02T12:34:56
             */
            created_at?: string;
            /**
             * Format: date-time
             * @example 2025-01-02T12:34:56
             */
            updated_at?: string;
        };
        NoteResponse: {
            /** @example 1 */
            note_id?: number;
            /** @example Заголовок заметки */
            title?: string;
            /** @example Описание заметки в формате Markdown */
            body?: string;
            /**
             * Format: date-time
             * @example 2025-01-02T12:34:56
             */
            created_at?: string;
            /**
             * Format: date-time
             * @example 2025-01-02T12:34:56
             */
            updated_at?: string;
        };
        Notes: components["schemas"]["NoteResponse"][];
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    registerUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Данные нового пользователя для регистрации */
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Имя пользователя должно содержать от 3 до 30 символов, может включать буквы, цифры, подчеркивания и тире.
                     * @example user123
                     */
                    username?: string;
                    /**
                     * @description Пароль должен содержать от 8 до 32 символов, включать минимум одну строчную букву и одну цифру.
                     * @example password123
                     */
                    password?: string;
                };
            };
        };
        responses: {
            /** @description Успешная регистрация нового пользователя */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Некорректные данные для регистрации */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Пользователь с таким именем уже существует */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    loginUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Данные пользователя для аутентификации */
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Имя пользователя должно содержать от 3 до 30 символов, может включать буквы, цифры, подчеркивания и тире.
                     * @example user123
                     */
                    username?: string;
                    /**
                     * @description Пароль должен содержать от 8 до 32 символов, включать минимум одну строчную букву и одну цифру.
                     * @example password123
                     */
                    password?: string;
                };
            };
        };
        responses: {
            /** @description Успешная аутентификация, возвращен JWT токен, который действует несколько дней */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example your_jwt_token_here */
                        access_token?: string;
                    };
                };
            };
            /** @description Неверные данные для аутентификации */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Такого пользователя не существует */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getNotesWithSearchAndPagination: {
        parameters: {
            query?: {
                /** @description Ключевые слова для поиска. */
                query?: string;
                tags?: string[];
                /** @description Тип поиска - семантический или точный. */
                searchType?: "semantic" | "exact" | "ai";
                /** @description Номер страницы для пагинации (по умолчанию 1). */
                page?: number;
                /** @description Количество заметок на странице (по умолчанию 20). */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Список заметок с фильтрацией, поиском и пагинацией */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notes"];
                };
            };
            /** @description Неверные параметры запроса */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        errors?: {
                            /** @description Имя поля, где произошла ошибка */
                            field?: string;
                            /** @description Сообщение об ошибке */
                            message?: string;
                        }[];
                    };
                };
            };
            /** @description Недействительный или истёкший JWT-токен. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createNote: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Данные для новой заметки */
        requestBody: {
            content: {
                "application/json": components["schemas"]["NoteCreateRequest"];
            };
        };
        responses: {
            /** @description Заметка успешно создана */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 1 */
                        note_id?: number;
                    };
                };
            };
            /** @description Неверный запрос, отсутствуют необходимые поля или данные неверны. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        errors?: {
                            /** @description Имя поля, где произошла ошибка */
                            field?: string;
                            /** @description Сообщение ошибки дял поля */
                            message?: string;
                        }[];
                    };
                };
            };
            /** @description Недействительный или истёкший JWT-токен. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getNote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                note_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Заметка успешно найдена */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotePatchRequest"];
                };
            };
            /** @description Недействительный или истёкший JWT-токен. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Заметка не найдена */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteNote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                note_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Заметка успешно удалена */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Недействительный или истёкший JWT-токен. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Заметка не найдена */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateNote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                note_id: number;
            };
            cookie?: never;
        };
        /** @description Новые данные для заметки */
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotePatchRequest"];
            };
        };
        responses: {
            /** @description Заметка успешно обновлена */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Неверный запрос, отсутствуют необходимые поля или данные неверны. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        errors?: {
                            /** @description Имя поля, где произошла ошибка */
                            field?: string;
                            /** @description Сообщение ошибки дял поля */
                            message?: string;
                        }[];
                    };
                };
            };
            /** @description Недействительный или истёкший JWT-токен. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addChecklistToNote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID заметки, к которой нужно добавить чеклист */
                note_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Заголовок чеклиста */
                    title?: string;
                };
            };
        };
        responses: {
            /** @description Чеклист успешно создан */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Айди созданого чеклиста
                         * @example 2
                         */
                        checklist_id?: number;
                    };
                };
            };
            /** @description Неавторизованный запрос, требуется JWT токен */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Заметка с указанным ID не найдена */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addChecklistItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID чеклиста, к которому нужно добавить пункт */
                checklist_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Текст пункта чеклиста */
                    text?: string;
                };
            };
        };
        responses: {
            /** @description Пункт успешно добавлен в чеклист */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description ID созданного пункта
                         * @example 5
                         */
                        item_id?: number;
                    };
                };
            };
            /** @description Неавторизованный запрос, требуется JWT токен */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Чеклист с указанным ID не найден */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateChecklistItemStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID пункта чеклиста, статус которого нужно изменить */
                item_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Статус выполненности пункта успешно изменён */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Неавторизованный запрос, требуется JWT токен */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Пункт чеклиста с указанным ID не найден */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteChecklistItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID пункта чеклиста, который нужно удалить */
                item_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Пункт успешно удалён из чеклиста */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Неавторизованный запрос, требуется JWT токен */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Пункт чеклиста с указанным ID не найден */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getChecklistById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID чеклиста, который нужно получить */
                checklist_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Чеклист успешно найден */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description ID чеклиста
                         * @example 12
                         */
                        checklist_id?: number;
                        /**
                         * @description Заголовок чеклиста
                         * @example Shopping List
                         */
                        title?: string;
                        /**
                         * Format: date-time
                         * @description Дата создания чеклиста
                         * @example 2025-03-10T09:30:00+00:00
                         */
                        created_at?: string;
                        /**
                         * Format: date-time
                         * @description Дата последнего обновления чеклиста
                         * @example 2025-03-10T10:30:00+00:00
                         */
                        updated_at?: string;
                        items?: {
                            /**
                             * @description ID пункта чеклиста
                             * @example 1
                             */
                            item_id?: number;
                            /**
                             * @description Текст пункта
                             * @example Buy apples
                             */
                            text?: string;
                            /**
                             * @description Статус выполнения
                             * @example false
                             */
                            completed?: boolean;
                            /**
                             * Format: date-time
                             * @description Дата создания пункта
                             * @example 2025-03-10T09:30:00+00:00
                             */
                            created_at?: string;
                            /**
                             * Format: date-time
                             * @description Дата последнего обновления пункта
                             * @example 2025-03-10T10:30:00+00:00
                             */
                            updated_at?: string;
                        }[];
                    };
                };
            };
            /** @description Неавторизованный запрос, требуется JWT токен */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Чеклист с указанным ID не найден */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteChecklist: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID чеклиста, который нужно удалить */
                checklist_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Чеклист успешно удалён */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Неавторизованный запрос, требуется JWT токен */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Чеклист с указанным ID не найден */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addAttachmentToNote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID заметки, к которой нужно добавить вложение */
                note_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description Файл, который нужно прикрепить к заметке
                     */
                    file?: string;
                };
            };
        };
        responses: {
            /** @description Файл успешно загружен и добавлен к заметке */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Айди файла
                         * @example 2
                         */
                        attachment_id?: number;
                    };
                };
            };
            /** @description Файл отсутствует */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Неавторизованный запрос, требуется JWT токен */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Заметка с указанным ID не найдена */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Файл слишком большой */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAttachmentFromNote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                attachment_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Файл успешно отправлен */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * Format: binary
                         * @description Файл, который нужно прикрепить к заметке
                         */
                        file?: string;
                    };
                };
            };
            /** @description Неавторизованный запрос, требуется JWT токен */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Вложение не найдено */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteAttachmentFromNote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                attachment_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Файл успешно удален */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Неавторизованный запрос, требуется JWT токен */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Вложение не найдено */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Название нового тега */
        requestBody: {
            content: {
                "application/json": {
                    /** @example work */
                    name?: string;
                };
            };
        };
        responses: {
            /** @description Тег успешно создан */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 1 */
                        tag_id?: number;
                    };
                };
            };
            /** @description Неверный запрос */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Недействительный или истёкший JWT-токен. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Такой тег уже существует */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllTags: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Список всех тегов */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 1 */
                        tag_id?: number;
                        /** @example work */
                        name?: string;
                    }[];
                };
            };
            /** @description Недействительный или истёкший JWT-токен. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTagsForNote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID заметки, для которой требуется получить теги */
                note_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Список тегов, связанных с заметкой */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 1 */
                        tag_id?: number;
                        /** @example work */
                        name?: string;
                    }[];
                };
            };
            /** @description Неверный запрос */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Недействительный или истёкший JWT-токен. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Заметка с указанным ID не найдена */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addTagToNote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID заметки, к которой нужно добавить тег */
                note_id: number;
                /** @description ID тега, который нужно добавить */
                tag_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Тег успешно добавлен к заметке */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Неверный запрос */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Недействительный или истёкший JWT-токен. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Заметка с указанным ID не найдена или тег не существует. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Такой тег уже добавлен к заметке */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteTagToNote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID заметки, у которой нужно удалить тег */
                note_id: number;
                /** @description ID тега, который нужно удалить */
                tag_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Тег успешно удален */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Неверный запрос */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Недействительный или истёкший JWT-токен. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Заметка с указанным ID не найдена или тег не существует. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAIAnswer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Запрос пользователя */
        requestBody: {
            content: {
                "application/json": {
                    /** @example Как мне улучшить свою продуктивность? */
                    question?: string;
                };
            };
        };
        responses: {
            /** @description Ответ от ИИ */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        query_id?: number;
                        /** @example Рекомендуется использовать технику Pomodoro для улучшения концентрации. */
                        answer?: string;
                    };
                };
            };
            /** @description Неверный запрос */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Недействительный или истёкший JWT-токен. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAIHistory: {
        parameters: {
            query?: {
                /** @description Номер страницы для пагинации (по умолчанию 1). */
                page?: number;
                /** @description Количество записей на странице (по умолчанию 20). */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description История запросов и ответов ИИ */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        history?: {
                            query_id?: number;
                            /**
                             * @description Запрос пользователя к ИИ.
                             * @example Как мне улучшить свою продуктивность?
                             */
                            query?: string;
                            /**
                             * @description Ответ ИИ на запрос.
                             * @example Рекомендуется использовать технику Pomodoro для улучшения концентрации.
                             */
                            response?: string;
                            /**
                             * Format: date-time
                             * @description Дата и время запроса.
                             * @example 2025-01-02T12:34:56Z
                             */
                            created_at?: string;
                        }[];
                    };
                };
            };
            /** @description Неверный запрос. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Недействительный или истёкший JWT-токен. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    suggestQueries: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Рекомендации по запросам */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Недействительный или истёкший JWT-токен. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    generateTags: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                note_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Список сгенерированных тегов */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Недействительный или истёкший JWT-токен. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Заметка не найдена */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    suggestTags: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                note_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Рекомендованные теги */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Недействительный или истёкший JWT-токен. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Заметка не найдена */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
